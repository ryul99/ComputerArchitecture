/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sun Apr  1 17:50:59 KST 2018
 * 
 */

/* Generation options: */
#ifndef __mkTbRightArithmeticPipelined_h__
#define __mkTbRightArithmeticPipelined_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkTbRightArithmeticPipelined module */
class MOD_mkTbRightArithmeticPipelined : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUWide> INST_bsrap_bsrp_inFifo;
  MOD_Fifo<tUWide> INST_bsrap_bsrp_midFifo1;
  MOD_Fifo<tUWide> INST_bsrap_bsrp_midFifo2;
  MOD_Fifo<tUWide> INST_bsrap_bsrp_midFifo3;
  MOD_Fifo<tUWide> INST_bsrap_bsrp_midFifo4;
  MOD_Fifo<tUWide> INST_bsrap_bsrp_midFifo5;
  MOD_Fifo<tUWide> INST_bsrap_bsrp_outFifo;
  MOD_Reg<tUInt32> INST_correct;
  MOD_Reg<tUInt32> INST_input_cycle;
  MOD_Reg<tUInt32> INST_output_cycle;
  MOD_Reg<tUInt8> INST_randomShift_init;
  MOD_Reg<tUInt8> INST_randomVal_init;
  MOD_Fifo<tUWide> INST_valFifo;
 
 /* Constructor */
 public:
  MOD_mkTbRightArithmeticPipelined(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt32 DEF_x__h31129;
  tUInt32 DEF_x__h30737;
  tUInt8 DEF_output_cycle_54_EQ_128___d155;
 
 /* Local definitions */
 private:
  tUWide DEF_ab__h25469;
  tUWide DEF_ab__h20796;
  tUWide DEF_ab__h15905;
  tUWide DEF_ab__h10906;
  tUWide DEF_ab__h5853;
  tUWide DEF_ab__h764;
  tUInt64 DEF_x__h30471;
  tUInt64 DEF_TASK_getRandom___d147;
  tUWide DEF_TASK_getRandom_47_CONCAT_TASK_getRandom_48_BIT_ETC___d150;
  tUWide DEF_ab__h30856;
  tUWide DEF_ab__h30909;
  tUWide DEF_IF_bsrap_bsrp_midFifo5_first__09_BIT_6_10_THEN_ETC___d134;
  tUWide DEF_IF_bsrap_bsrp_midFifo4_first__4_BIT_5_5_THEN_I_ETC___d101;
  tUWide DEF_IF_bsrap_bsrp_midFifo3_first__3_BIT_4_4_THEN_I_ETC___d76;
  tUWide DEF_IF_bsrap_bsrp_midFifo2_first__4_BIT_3_5_THEN_I_ETC___d55;
  tUWide DEF_IF_bsrap_bsrp_inFifo_first_BIT_1_THEN_IF_bsrap_ETC___d18;
  tUWide DEF_IF_bsrap_bsrp_midFifo1_first__6_BIT_2_7_THEN_I_ETC___d36;
  tUWide DEF_TASK_getRandom_47_CONCAT_TASK_getRandom_48_BIT_ETC___d152;
 
 /* Rules */
 public:
  void RL_bsrap_bsrp_shift1();
  void RL_bsrap_bsrp_shift2();
  void RL_bsrap_bsrp_shift3();
  void RL_bsrap_bsrp_shift4();
  void RL_bsrap_bsrp_shift5();
  void RL_bsrap_bsrp_shift6();
  void RL_randomVal_initialize();
  void RL_randomShift_initialize();
  void RL_test_request();
  void RL_test_response();
 
 /* Methods */
 public:
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTbRightArithmeticPipelined &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkTbRightArithmeticPipelined &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkTbRightArithmeticPipelined &backing);
};

#endif /* ifndef __mkTbRightArithmeticPipelined_h__ */
