/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Tue May  1 20:32:40 KST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkBfly4.h"


/* Constructor */
MOD_mkBfly4::MOD_mkBfly4(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent), __clk_handle_0(BAD_CLOCK_HANDLE), PORT_RST_N((tUInt8)1u)
{
  symbol_count = 0u;
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkBfly4::init_symbols_0()
{
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkBfly4::METH_bfly4(tUInt64 ARG_bfly4_t, tUInt64 ARG_bfly4_x)
{
  tUInt8 DEF_x__h2012;
  tUInt8 DEF_x__h2073;
  tUInt8 DEF_y__h1753;
  tUInt8 DEF_x__h1752;
  tUInt8 DEF_y__h1819;
  tUInt8 DEF_x__h1818;
  tUInt8 DEF_y__h1933;
  tUInt8 DEF_x__h1932;
  tUInt8 DEF_y__h1611;
  tUInt8 DEF_x__h1610;
  tUInt8 DEF_y__h1625;
  tUInt8 DEF_x__h1624;
  tUInt8 DEF_y__h1609;
  tUInt8 DEF_x__h1608;
  tUInt8 DEF_y__h1715;
  tUInt8 DEF_x__h1714;
  tUInt8 DEF_y__h1851;
  tUInt8 DEF_x__h1850;
  tUInt8 DEF_x__h1963;
  tUInt8 DEF_x__h1902;
  tUInt32 DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72;
  tUInt8 DEF_x__h1849;
  tUInt8 DEF_x__h1684;
  tUInt8 DEF_x__h1607;
  tUInt8 DEF_x__h255;
  tUInt32 DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69;
  tUInt8 DEF_y__h1613;
  tUInt8 DEF_y__h1616;
  tUInt8 DEF_y__h1627;
  tUInt8 DEF_y__h1630;
  tUInt8 DEF_y__h1619;
  tUInt8 DEF_y__h1622;
  tUInt8 DEF_y__h1633;
  tUInt8 DEF_y__h1636;
  tUInt8 DEF_x__h1615;
  tUInt8 DEF_x__h1612;
  tUInt8 DEF_x__h1629;
  tUInt8 DEF_x__h1626;
  tUInt8 DEF_x__h1621;
  tUInt8 DEF_x__h1618;
  tUInt8 DEF_x__h1635;
  tUInt8 DEF_x__h1632;
  tUInt8 DEF_ii__h826;
  tUInt8 DEF_rr__h825;
  tUInt8 DEF_rr__h1161;
  tUInt8 DEF_ii__h1162;
  tUInt8 DEF_rr__h1341;
  tUInt8 DEF_ii__h1342;
  tUInt8 DEF_rr__h1483;
  tUInt8 DEF_ii__h1484;
  tUInt8 DEF_ri__h828;
  tUInt8 DEF_ir__h827;
  tUInt8 DEF_ri__h1164;
  tUInt8 DEF_ir__h1163;
  tUInt8 DEF_ri__h1344;
  tUInt8 DEF_ir__h1343;
  tUInt8 DEF_ri__h1486;
  tUInt8 DEF_ir__h1485;
  tUInt64 PORT_bfly4;
  DEF_x__h1632 = (tUInt8)(ARG_bfly4_x >> 56u);
  DEF_x__h1635 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 48u));
  DEF_x__h1618 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 40u));
  DEF_x__h1626 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 24u));
  DEF_x__h1621 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 32u));
  DEF_x__h1629 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 16u));
  DEF_x__h1612 = (tUInt8)((tUInt8)255u & (ARG_bfly4_x >> 8u));
  DEF_x__h1615 = (tUInt8)((tUInt8)255u & ARG_bfly4_x);
  DEF_y__h1636 = (tUInt8)(ARG_bfly4_t >> 56u);
  DEF_ir__h1485 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1635)) * ((tUInt32)(DEF_y__h1636)))));
  DEF_rr__h1483 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1632)) * ((tUInt32)(DEF_y__h1636)))));
  DEF_y__h1633 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 48u));
  DEF_ri__h1486 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1632)) * ((tUInt32)(DEF_y__h1633)))));
  DEF_ii__h1484 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1635)) * ((tUInt32)(DEF_y__h1633)))));
  DEF_y__h1622 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 40u));
  DEF_ir__h1163 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1621)) * ((tUInt32)(DEF_y__h1622)))));
  DEF_rr__h1161 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1618)) * ((tUInt32)(DEF_y__h1622)))));
  DEF_y__h1619 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 32u));
  DEF_ri__h1164 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1618)) * ((tUInt32)(DEF_y__h1619)))));
  DEF_ii__h1162 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1621)) * ((tUInt32)(DEF_y__h1619)))));
  DEF_y__h1630 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 24u));
  DEF_ir__h1343 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1629)) * ((tUInt32)(DEF_y__h1630)))));
  DEF_rr__h1341 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1626)) * ((tUInt32)(DEF_y__h1630)))));
  DEF_y__h1627 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 16u));
  DEF_ri__h1344 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1626)) * ((tUInt32)(DEF_y__h1627)))));
  DEF_ii__h1342 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1629)) * ((tUInt32)(DEF_y__h1627)))));
  DEF_y__h1616 = (tUInt8)((tUInt8)255u & (ARG_bfly4_t >> 8u));
  DEF_ir__h827 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1615)) * ((tUInt32)(DEF_y__h1616)))));
  DEF_rr__h825 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1612)) * ((tUInt32)(DEF_y__h1616)))));
  DEF_y__h1613 = (tUInt8)((tUInt8)255u & ARG_bfly4_t);
  DEF_ri__h828 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1612)) * ((tUInt32)(DEF_y__h1613)))));
  DEF_ii__h826 = (tUInt8)((tUInt8)255u & (65535u & (((tUInt32)(DEF_x__h1615)) * ((tUInt32)(DEF_y__h1613)))));
  DEF_x__h1624 = (tUInt8)255u & (DEF_ri__h1344 + DEF_ir__h1343);
  DEF_y__h1625 = (tUInt8)255u & (DEF_ri__h1486 + DEF_ir__h1485);
  DEF_y__h1851 = (tUInt8)255u & (DEF_x__h1624 + DEF_y__h1625);
  DEF_y__h1609 = (tUInt8)255u & (DEF_x__h1624 - DEF_y__h1625);
  DEF_x__h1610 = (tUInt8)255u & (DEF_ri__h828 + DEF_ir__h827);
  DEF_y__h1611 = (tUInt8)255u & (DEF_ri__h1164 + DEF_ir__h1163);
  DEF_x__h1850 = (tUInt8)255u & (DEF_x__h1610 + DEF_y__h1611);
  DEF_x__h1849 = (tUInt8)255u & (DEF_x__h1850 - DEF_y__h1851);
  DEF_x__h1608 = (tUInt8)255u & (DEF_x__h1610 - DEF_y__h1611);
  DEF_x__h1607 = (tUInt8)255u & (DEF_x__h1608 - DEF_y__h1609);
  DEF_x__h1963 = (tUInt8)255u & (DEF_x__h1608 + DEF_y__h1609);
  DEF_x__h1818 = (tUInt8)255u & (DEF_rr__h1341 - DEF_ii__h1342);
  DEF_y__h1819 = (tUInt8)255u & (DEF_rr__h1483 - DEF_ii__h1484);
  DEF_y__h1715 = (tUInt8)255u & (DEF_x__h1818 + DEF_y__h1819);
  DEF_y__h1933 = (tUInt8)255u & (DEF_x__h1818 - DEF_y__h1819);
  DEF_x__h1752 = (tUInt8)255u & (DEF_rr__h825 - DEF_ii__h826);
  DEF_y__h1753 = (tUInt8)255u & (DEF_rr__h1161 - DEF_ii__h1162);
  DEF_x__h1714 = (tUInt8)255u & (DEF_x__h1752 + DEF_y__h1753);
  DEF_x__h1684 = (tUInt8)255u & (DEF_x__h1714 - DEF_y__h1715);
  DEF_x__h1932 = (tUInt8)255u & (DEF_x__h1752 - DEF_y__h1753);
  DEF_x__h255 = (tUInt8)255u & (DEF_x__h1932 - DEF_y__h1933);
  DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69 = (((((tUInt32)(DEF_x__h255)) << 24u) | (((tUInt32)(DEF_x__h1607)) << 16u)) | (((tUInt32)(DEF_x__h1684)) << 8u)) | (tUInt32)(DEF_x__h1849);
  DEF_x__h1902 = (tUInt8)255u & (DEF_x__h1932 + DEF_y__h1933);
  DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72 = 65535u & ((((tUInt32)(DEF_x__h1902)) << 8u) | (tUInt32)(DEF_x__h1963));
  DEF_x__h2073 = (tUInt8)255u & (DEF_x__h1850 + DEF_y__h1851);
  DEF_x__h2012 = (tUInt8)255u & (DEF_x__h1714 + DEF_y__h1715);
  PORT_bfly4 = (((((tUInt64)(DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d69)) << 32u) | (((tUInt64)(DEF_bfly4_x_BITS_15_TO_8_MUL_bfly4_t_BITS_15_TO_8__ETC___d72)) << 16u)) | (((tUInt64)(DEF_x__h2012)) << 8u)) | (tUInt64)(DEF_x__h2073);
  return PORT_bfly4;
}

tUInt8 MOD_mkBfly4::METH_RDY_bfly4()
{
  tUInt8 PORT_RDY_bfly4;
  tUInt8 DEF_CAN_FIRE_bfly4;
  DEF_CAN_FIRE_bfly4 = (tUInt8)1u;
  PORT_RDY_bfly4 = DEF_CAN_FIRE_bfly4;
  return PORT_RDY_bfly4;
}


/* Reset routines */

void MOD_mkBfly4::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkBfly4::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkBfly4::dump_state(unsigned int indent)
{
}


/* VCD dumping routines */

unsigned int MOD_mkBfly4::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 1u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkBfly4::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBfly4 &backing)
{
  vcd_defs(dt, backing);
}

void MOD_mkBfly4::vcd_defs(tVCDDumpType dt, MOD_mkBfly4 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
    }
}
