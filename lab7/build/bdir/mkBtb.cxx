/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Sat Jun 16 14:04:50 KST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkBtb.h"


/* Constructor */
MOD_mkBtb::MOD_mkBtb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_ppcArr(simHdl, "ppcArr", this, 6u, 64u, (tUInt8)0u, (tUInt8)63u),
    INST_tagArr(simHdl, "tagArr", this, 6u, 59u, (tUInt8)0u, (tUInt8)63u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_update_rd.setSize(130u);
  PORT_update_rd.clear();
  symbol_count = 3u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkBtb::init_symbols_0()
{
  init_symbol(&symbols[0u], "ppcArr", SYM_MODULE, &INST_ppcArr);
  init_symbol(&symbols[1u], "tagArr", SYM_MODULE, &INST_tagArr);
  init_symbol(&symbols[2u], "update_rd", SYM_PORT, &PORT_update_rd, 130u);
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkBtb::METH_predPc(tUInt64 ARG_predPc_pc, tUInt8 ARG_predPc_iCode)
{
  tUInt64 DEF_valP__h445;
  tUInt8 DEF_tagArr_sub_predPc_pc_BITS_5_TO_0_BIT_58_AND_pr_ETC___d7;
  tUInt64 DEF_IF_predPc_iCode_EQ_0b0_OR_predPc_iCode_EQ_0b1__ETC___d28;
  tUInt64 DEF_tag__h442;
  tUInt64 DEF_tagArr_sub_predPc_pc_BITS_5_TO_0___d2;
  tUInt8 DEF_idx__h441;
  tUInt64 DEF_ret__h516;
  tUInt64 PORT_predPc;
  DEF_idx__h441 = (tUInt8)((tUInt8)63u & ARG_predPc_pc);
  DEF_ret__h516 = INST_ppcArr.METH_sub(DEF_idx__h441);
  DEF_tagArr_sub_predPc_pc_BITS_5_TO_0___d2 = INST_tagArr.METH_sub(DEF_idx__h441);
  DEF_tag__h442 = (tUInt64)(ARG_predPc_pc >> 6u);
  switch (ARG_predPc_iCode) {
  case (tUInt8)0u:
  case (tUInt8)1u:
  case (tUInt8)9u:
    DEF_IF_predPc_iCode_EQ_0b0_OR_predPc_iCode_EQ_0b1__ETC___d28 = 1llu;
    break;
  case (tUInt8)2u:
  case (tUInt8)6u:
  case (tUInt8)10u:
  case (tUInt8)11u:
  case (tUInt8)12u:
    DEF_IF_predPc_iCode_EQ_0b0_OR_predPc_iCode_EQ_0b1__ETC___d28 = 2llu;
    break;
  case (tUInt8)7u:
  case (tUInt8)8u:
    DEF_IF_predPc_iCode_EQ_0b0_OR_predPc_iCode_EQ_0b1__ETC___d28 = 9llu;
    break;
  default:
    DEF_IF_predPc_iCode_EQ_0b0_OR_predPc_iCode_EQ_0b1__ETC___d28 = 10llu;
  }
  DEF_tagArr_sub_predPc_pc_BITS_5_TO_0_BIT_58_AND_pr_ETC___d7 = (tUInt8)(DEF_tagArr_sub_predPc_pc_BITS_5_TO_0___d2 >> 58u) && DEF_tag__h442 == ((tUInt64)(288230376151711743llu & DEF_tagArr_sub_predPc_pc_BITS_5_TO_0___d2));
  DEF_valP__h445 = ARG_predPc_pc + DEF_IF_predPc_iCode_EQ_0b0_OR_predPc_iCode_EQ_0b1__ETC___d28;
  PORT_predPc = DEF_tagArr_sub_predPc_pc_BITS_5_TO_0_BIT_58_AND_pr_ETC___d7 ? DEF_ret__h516 : DEF_valP__h445;
  return PORT_predPc;
}

tUInt8 MOD_mkBtb::METH_RDY_predPc()
{
  tUInt8 PORT_RDY_predPc;
  tUInt8 DEF_CAN_FIRE_predPc;
  DEF_CAN_FIRE_predPc = (tUInt8)1u;
  PORT_RDY_predPc = DEF_CAN_FIRE_predPc;
  return PORT_RDY_predPc;
}

void MOD_mkBtb::METH_update(tUWide ARG_update_rd)
{
  tUInt64 DEF__1_CONCAT_update_rd_BITS_129_TO_72_2___d33;
  tUInt8 DEF_update_rd_BIT_1___d30;
  tUInt8 DEF_idx__h616;
  tUInt64 DEF_x__h665;
  PORT_update_rd = ARG_update_rd;
  DEF_x__h665 = primExtract64(64u, 130u, ARG_update_rd, 32u, 65u, 32u, 2u);
  DEF_idx__h616 = ARG_update_rd.get_bits_in_word8(2u, 2u, 6u);
  DEF_update_rd_BIT_1___d30 = ARG_update_rd.get_bits_in_word8(0u, 1u, 1u);
  DEF__1_CONCAT_update_rd_BITS_129_TO_72_2___d33 = 576460752303423487llu & ((((tUInt64)((tUInt8)1u)) << 58u) | primExtract64(58u,
															     130u,
															     ARG_update_rd,
															     32u,
															     129u,
															     32u,
															     72u));
  if (DEF_update_rd_BIT_1___d30)
    INST_tagArr.METH_upd(DEF_idx__h616, DEF__1_CONCAT_update_rd_BITS_129_TO_72_2___d33);
  if (DEF_update_rd_BIT_1___d30)
    INST_ppcArr.METH_upd(DEF_idx__h616, DEF_x__h665);
}

tUInt8 MOD_mkBtb::METH_RDY_update()
{
  tUInt8 PORT_RDY_update;
  tUInt8 DEF_CAN_FIRE_update;
  DEF_CAN_FIRE_update = (tUInt8)1u;
  PORT_RDY_update = DEF_CAN_FIRE_update;
  return PORT_RDY_update;
}


/* Reset routines */

void MOD_mkBtb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkBtb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkBtb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_ppcArr.dump_state(indent + 2u);
  INST_tagArr.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkBtb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 4u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "update_rd", 130u);
  num = INST_ppcArr.dump_VCD_defs(num);
  num = INST_tagArr.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkBtb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkBtb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkBtb::vcd_defs(tVCDDumpType dt, MOD_mkBtb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 130u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.PORT_update_rd) != PORT_update_rd)
      {
	vcd_write_val(sim_hdl, num, PORT_update_rd, 130u);
	backing.PORT_update_rd = PORT_update_rd;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, PORT_update_rd, 130u);
      backing.PORT_update_rd = PORT_update_rd;
    }
}

void MOD_mkBtb::vcd_prims(tVCDDumpType dt, MOD_mkBtb &backing)
{
  INST_ppcArr.dump_VCD(dt, backing.INST_ppcArr);
  INST_tagArr.dump_VCD(dt, backing.INST_tagArr);
}
