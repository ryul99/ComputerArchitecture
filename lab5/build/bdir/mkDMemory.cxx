/*
 * Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
 * 
 * On Thu May 17 13:26:06 KST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkDMemory.h"


/* String declarations */
static std::string const __str_literal_1("memory.vmh", 10u);


/* Constructor */
MOD_mkDMemory::MOD_mkDMemory(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_dMem(simHdl, "dMem", this, __str_literal_1, 26u, 64u, 0u, 67108863u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  PORT_req_r.setSize(129u);
  PORT_req_r.clear();
  symbol_count = 2u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkDMemory::init_symbols_0()
{
  init_symbol(&symbols[0u], "dMem", SYM_MODULE, &INST_dMem);
  init_symbol(&symbols[1u], "req_r", SYM_PORT, &PORT_req_r, 129u);
}


/* Rule actions */


/* Methods */

tUInt64 MOD_mkDMemory::METH_req(tUWide ARG_req_r)
{
  tUInt64 DEF_req__avValue1;
  tUInt8 DEF_req_r_BIT_128___d1;
  tUInt32 DEF_i__h337;
  tUInt64 DEF_x__h284;
  tUInt64 PORT_req;
  PORT_req_r = ARG_req_r;
  DEF_x__h284 = primExtract64(64u, 129u, ARG_req_r, 32u, 63u, 32u, 0u);
  DEF_i__h337 = ARG_req_r.get_bits_in_word32(2u, 3u, 26u);
  DEF_req_r_BIT_128___d1 = ARG_req_r.get_bits_in_word8(4u, 0u, 1u);
  DEF_req__avValue1 = INST_dMem.METH_sub(DEF_i__h337);
  PORT_req = DEF_req__avValue1;
  if (DEF_req_r_BIT_128___d1)
    INST_dMem.METH_upd(DEF_i__h337, DEF_x__h284);
  return PORT_req;
}

tUInt8 MOD_mkDMemory::METH_RDY_req()
{
  tUInt8 PORT_RDY_req;
  tUInt8 DEF_CAN_FIRE_req;
  DEF_CAN_FIRE_req = (tUInt8)1u;
  PORT_RDY_req = DEF_CAN_FIRE_req;
  return PORT_RDY_req;
}


/* Reset routines */

void MOD_mkDMemory::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkDMemory::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkDMemory::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_dMem.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkDMemory::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "req_r", 129u);
  num = INST_dMem.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkDMemory::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkDMemory &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkDMemory::vcd_defs(tVCDDumpType dt, MOD_mkDMemory &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 129u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.PORT_req_r) != PORT_req_r)
      {
	vcd_write_val(sim_hdl, num, PORT_req_r, 129u);
	backing.PORT_req_r = PORT_req_r;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, PORT_req_r, 129u);
      backing.PORT_req_r = PORT_req_r;
    }
}

void MOD_mkDMemory::vcd_prims(tVCDDumpType dt, MOD_mkDMemory &backing)
{
  INST_dMem.dump_VCD(dt, backing.INST_dMem);
}
